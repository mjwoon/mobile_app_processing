/* autogenerated by Processing revision 1293 on 2024-12-07 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import controlP5.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class mainWidget extends PApplet {


ArrayList<Widget> widgets = new ArrayList<Widget>();

int scrollY = 0; // 스크롤을 위한 변수
// boolean isDragging = false; // 드래그 중인지 여부 확인
float pos, npos;  // pos는 부드러운 스크롤을 위한 위치, npos는 목표 스크롤 위치

GamjaWidget gamjaWidget;
MusicWidget musicWidget;
BookWidget bookWidget; 
BatteryWidget batteryWidget;


public void setup() {
  /* size commented out by preprocessor */;
  background(255);

  gamjaWidget = new GamjaWidget(22, 822 + scrollY, 368, 224, 20,color(200, 200, 255));
  musicWidget = new MusicWidget(214,1064 + scrollY, 176, 104, 20,color(220,220,220));
  bookWidget = new BookWidget(26, 16 + scrollY, 380, 224, 20,color(255,220,220));
  batteryWidget = new BatteryWidget(22, 281 + scrollY, 368,90, 20,color(255));

  widgets.add(gamjaWidget);
  widgets.add(musicWidget);
  widgets.add(bookWidget);
  widgets.add(batteryWidget);
}

public void draw(){
    background(255);

    pushMatrix();
    translate(0, PApplet.parseInt(pos));

    // 각 위젯의 display() 호출
    for (Widget widget : widgets) {
        widget.display();
    }
    popMatrix();
}


// 마우스 클릭 
public void mousePressed() {

  for (Widget widget : widgets) {
    if (widget instanceof GamjaWidget) {
      GamjaWidget gamjaWidget = (GamjaWidget) widget;
      if (gamjaWidget.isArrowClicked(mouseX, mouseY,scrollY)) {
        println("다음 화면 전환");
        gamjaWidget.nextScreen();  // 클릭 시 화면 전환
      }
    }
  }

}

// 휠 스크롤 이벤트 처리
public void mouseWheel(MouseEvent event) {
  println("마우스 휠");
  // 휠의 스크롤 방향에 따라 npos 값을 변경
  float e = event.getCount();
  npos -= e * 20;  // 20은 스크롤 속도 (조정 가능)

  // 스크롤 제한: 화면을 넘어가지 않도록
  npos = constrain(npos, -1415, 0);  // 최대 스크롤 위치 -1415로 설정 (예시)
  
  // 부드러운 스크롤 효과를 위한 보간 처리
  pos += (npos - pos) * 0.1f;

  scrollY = PApplet.parseInt(pos);

  println("scrollY 업데이트 : " + scrollY);
}
class BatteryWidget extends Widget{
    PImage batteryImage; // 감자 이미지를 저장할 변수

    BatteryWidget(float x, float y, float width, float height,float radius, int bgColor) {
        super(x, y, width, height,radius, bgColor);

        batteryImage = loadImage("battery.png");

    }


    @Override public 
    void display() {
        fill(255, 204, 0);  // GamjaWidget만의 고유한 색상
        rect(x, y, width, height,radius);

        image(batteryImage, x, y, width, height);

    }
}
class BookWidget extends Widget{
    PImage bookImage; // 감자 이미지를 저장할 변수

    BookWidget(float x, float y, float width, float height, float radius,int bgColor) {
        super(x, y, width, height,radius, bgColor);

        bookImage = loadImage("book.png");

    }


    @Override public 
    void display() {
        fill(255, 204, 0);  // GamjaWidget만의 고유한 색상
        rect(x, y, width, height,radius);

        image(bookImage, x, y, width, height);

    }
}


class GamjaWidget extends Widget{
  PImage gamjaImage; // 감자 이미지를 저장할 변수
  PImage arrawImage;
  PImage gamjaImage2;
  boolean screenChanged = false;  // 화면 전환 여부 확인
  float scrollY; // 스크롤 위치를 저장할 변수

  GamjaWidget(float x, float y, float width, float height
  ,float radius, int bgColor) {
    super(x, y, width, height, radius, bgColor);

    gamjaImage = loadImage("GeGam.png");
    arrawImage = loadImage("Arrow.png");
    gamjaImage2 = loadImage("GeGamMent.png");
  }

  // Arrow 이미지 클릭 여부 확인
  public boolean isArrowClicked(float mouseX, float mouseY, float scrollY) {
    println("클릭하였습니다.");
    println("mouseX : " + mouseX + ", x : "+x);
    println("mouseY : " + mouseY + " , y:"+y);
    float gamjaX = x;  // 감자 이미지의 x 좌표
    float gamjaY = y + scrollY;  // 감자 이미지의 y 좌표
    float gamjaWidth = width;  // 감자 이미지의 너비
    float gamjaHeight = height;  // 감자 이미지의 높이
    if (mouseX > gamjaX && mouseX < gamjaX + gamjaWidth &&
        mouseY > gamjaY && mouseY < gamjaY + gamjaHeight) {
      println("True");
      return true;
    }
    println("False");
    return false;
  }

  // 화면 전환 로직
  public void nextScreen() {
    screenChanged = true;  // 화면을 변경했음을 표시
  }

  @Override public 
  void display() {
    fill(255, 204, 0);  // GamjaWidget만의 고유한 색상
    // rect(x, y, width, height, radius);

    image(gamjaImage, x, y,width,height);
    image(arrawImage,x+350, y+100, 22,22);

    if (screenChanged) {
        // 다른 화면을 보여주는 코드 추가
        // 예: 새 화면을 그리거나 화면을 전환하는 로직
      fill(255,255,255);
      rect(x, y, width, height, radius);
      
      image(gamjaImage2,x,y);
    // 예시로 "Next Screen" 표시
      }
    }
}




class MusicWidget extends Widget{

  PImage MusicImage; // 노래 이미지를 저장할 변수

  MusicWidget(float x, float y, float width, float height, float radius,int bgColor) {
    super(x, y, width, height, radius,bgColor);
    MusicImage = loadImage("widget_music.png");
  }
  

  @Override public 
  void display() {
    fill(255, 204, 0);  // MusicWidget만의 고유한 색상
    rect(x, y, width, height,radius);
    fill(0);

    image(MusicImage, x, y, width - 10, height - 10);
  }

  
}
class Widget {
  float x, y, width, height,radius;
  int bgColor;


  Widget(float x, float y, float width, float height,float radius, int bgColor) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.bgColor = bgColor; 
    this.radius = radius;
  }


  public void display() {
    fill(bgColor);
    rect(x, y, width, height,radius);
    fill(0);
  }
}


  public void settings() { size(436, 700); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "mainWidget" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
