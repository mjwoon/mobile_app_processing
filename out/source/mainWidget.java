/* autogenerated by Processing revision 1293 on 2024-12-08 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import controlP5.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class mainWidget extends PApplet {


ArrayList<Widget> widgets = new ArrayList<Widget>();

int scrollY = 0; // 스크롤을 위한 변수
// boolean isDragging = false; // 드래그 중인지 여부 확인
float pos, npos;  // pos는 부드러운 스크롤을 위한 위치, npos는 목표 스크롤 위치
PImage statusImage;

GamjaWidget gamjaWidget;
MusicWidget musicWidget;
BookWidget bookWidget; 
BatteryWidget batteryWidget;
ContestWidget contestWidget;
WeatherWidget weatherWidget;
NoteWidget noteWidget;
StatusWidget statusWidget;
AssistWidget assistWidget;
CalenderWidget calenderWidget;


public void setup() {
  /* size commented out by preprocessor */;
  background(255);
  
  statusWidget = new StatusWidget(22, 0, 372, 44, 20, color(255, 255, 255));
  bookWidget = new BookWidget(16, 40 + scrollY, 385, 227, 0, color(255,220,220)); 
  batteryWidget = new BatteryWidget(22, 286 + scrollY, 368, 90, 20, color(255));
  weatherWidget = new WeatherWidget(22, 398 + scrollY, 368, 138, 20, color(200, 200, 255));
  contestWidget = new ContestWidget(215, 558, 173, 258, 20, color(104,104,104));
  gamjaWidget = new GamjaWidget(22, 838+ scrollY, 368, 224, 20, color(200, 200, 255));
  musicWidget = new MusicWidget(214, 1084 + scrollY, 176, 104, 20, color(220,220,220)); 
  noteWidget = new NoteWidget(214, 1210 + scrollY, 174, 174, 20, color(200, 200, 255));
  assistWidget = new AssistWidget(22, 1084 + scrollY, 173, 305, 20, color(0xFFFFFFFF));
  calenderWidget = new CalenderWidget(22, 548, 190, 296, 20, color(104,104,104));

  widgets.add(bookWidget);
  widgets.add(batteryWidget);
  widgets.add(weatherWidget);
  widgets.add(contestWidget);
  widgets.add(gamjaWidget);
  widgets.add(musicWidget);
  widgets.add(noteWidget); 
  widgets.add(assistWidget);
  widgets.add(calenderWidget);
}

public void draw() {
  background(249,242,232);
  pushMatrix();
  translate(0, PApplet.parseInt(pos));
  
  drawScrollableContent();
  popMatrix();
  drawStatusBar();
}

// 상태바를 고정 그리기
public void drawStatusBar() {
  statusWidget.display();
}

// 스크롤 가능한 내용 그리기
public void drawScrollableContent() {
  // 각 위젯의 display() 호출
  for (Widget widget : widgets) {
    widget.display();
  }
}

// 마우스 클릭 
public void mousePressed() {

  for (Widget widget : widgets) {
    if (widget instanceof GamjaWidget) {
      GamjaWidget gamjaWidget = (GamjaWidget) widget;
      if (gamjaWidget.isArrowClicked(mouseX, mouseY,scrollY)) {
        println("다음 화면 전환");
        gamjaWidget.nextScreen();
      }
    } else if (widget instanceof ContestWidget) {
      ContestWidget contestWidget = (ContestWidget) widget;
      if (contestWidget.isRightArrowClicked(mouseX,mouseY,scrollY)) {
        println("다음 공모전");
        contestWidget.nextScreen();
      } else if (contestWidget.isLeftArrowClicked(mouseX,mouseY,scrollY)) {
        print("이전 공모전");
        contestWidget.beforeScreen();
      } else if (contestWidget.isPluseClicked(mouseX,mouseY,scrollY) && 
      contestWidget.plusIndex == 1){
        contestWidget.moveLink();
      }
    } else if (widget instanceof CalenderWidget){
      CalenderWidget calenderWidget = (CalenderWidget) widget;
      if(calenderWidget.isPluseClicked(mouseX, mouseY, scrollY)){
        println("구글 캘린더로 이동");
        calenderWidget.moveLink();
      }
    }
  } 

}

public void mouseWheel(MouseEvent event) {

  float e = event.getCount();
  npos -= e * 40;  // 40은 스크롤 속도 (조정 가능)
  
  // 스크롤 제한: 화면을 넘어가지 않도록
  npos = constrain(npos, -548, 0);  
  
  // 부드러운 스크롤 효과를 위한 보간 처리
  pos += (npos - pos) * 0.1f;
  
  scrollY = PApplet.parseInt(pos);
}
class AssistWidget extends Widget{
  int selectedIndex = -1; // 선택된 옵션의 인덱스 (-1은 선택 없음)

  AssistWidget(float x, float y, float width, float height, float radius, int bgColor) {
    super(x, y, width, height, radius, bgColor);
    
  }
  

  @Override public 
  void display() {
    fill(0xFFFFFFFF);  // GamjaWidget만의 고유한 색상
    rect(x, y, width, height,radius);

  }  
} 
class BatteryWidget extends Widget{
    PImage batteryImage; // 감자 이미지를 저장할 변수

    BatteryWidget(float x, float y, float width, float height,float radius, int bgColor) {
        super(x, y, width, height, radius, bgColor);

        batteryImage = loadImage("battery.png");

    }


    @Override public 
    void display() {
        fill(249,242,232);  // GamjaWidget만의 고유한 색상
        rect(x, y, width, height, radius);

        image(batteryImage, x, y, width, height);

    }
}
class BookWidget extends Widget{
    PImage bookImage; // 감자 이미지를 저장할 변수

    BookWidget(float x, float y, float width, float height, float radius,int bgColor) {
        super(x, y, width, height, radius, bgColor);

        bookImage = loadImage("book.png");

    }


    @Override public 
    void display() {
        fill(249,242,232);  // GamjaWidget만의 고유한 색상
        rect(x, y, width, height,radius);

        image(bookImage, x, y, width, height);

    }
}

class CalenderWidget extends Widget{
    PImage calenderImage, calenderPlusImage;
    float scrollY;
    String CalenderURL = "https://calendar.google.com/calendar/u/0/r?pli=1";

    CalenderWidget(float x, float y, float width, float height,
     float radius, int bgColor){
        super(x, y, width, height, radius, bgColor);

        calenderImage = loadImage("calender.png");
        calenderPlusImage = loadImage("calenderPlus.png");
    }

    @Override public 
    void display(){
        fill(255);

        image(calenderImage, x, y, width, height);
        image(calenderPlusImage, x+114, y+26, 53,56);
    }

    public boolean isPluseClicked(float mouseX, float mouseY, float scrollY){
        float plusX = x + 114;
        float plusY = y + 26 + scrollY;
        float plusWidth = 53;
        float plusHeigh = 56;

        if(mouseX > plusX && mouseX < plusX + plusWidth &&
        mouseY > plusY && mouseY < plusY + plusHeigh){
            println("플러스 버튼 클릭");
            return true;
        }
        return false;
    }

    public void moveLink(){
        link(CalenderURL);
    }
}

class ContestWidget extends Widget{

    PImage[] contestImg = new PImage[2];
    PImage plusImage,rightArrow,leftArrow;

    String[] contestTitle = new String[2];
    String[] contestDate = new String[2];
    boolean screenChanged = false;  
    float scrollY;
    int currentIndex = 0; 
    int plusIndex = 0; // 1일 때는 plus 이미지 나옴
    String ContestUrl = "https://linkareer.com/list/contest?filterBy_categoryIDs=38&filterType=CATEGORY&orderBy_direction=DESC&orderBy_field=CREATED_AT&page=1";


    ContestWidget(float x, float y, float width, float height,
    float radius, int bgColor){
        super(x,y, width, height, radius, bgColor);

        contestImg[0] = loadImage("contest1.png");
        contestImg[1] = loadImage("contest2.png");
        plusImage = loadImage("Plus.png");
        rightArrow = loadImage("rightArrow.png");
        leftArrow = loadImage("leftArrow.png");

        contestTitle[0] = "Title1";
        contestTitle[1] = "Title2";

        contestDate[0] = "24.9.1 ~ 24.10.15";
        contestDate[1] = "24.10.10 ~ 24.10.31";
    }

    @Override public 
    void display(){
        fill(104,104,104);
        rect(215,558,173,258,20);

        textSize(32);
        fill(255);

        if (currentIndex == 0) {
            text(contestTitle[currentIndex], x + 47, y + 40);  // 0번 인덱스일 때
        } else if (currentIndex == 1) {
            text(contestTitle[currentIndex], x + 47, y + 40);  // 1번 인덱스일 때 (위치 변경 가능)
        }

        image(contestImg[currentIndex], x + 33, y + 55, 110, 156);

        // 화살표 처리
        if (currentIndex == 0) {
            // 0번 인덱스에서는 오른쪽 화살표만
            image(rightArrow, x + 155, y + 130, 10, 15);
        } else if (currentIndex == 1) {
            // 1번 인덱스에서는 좌우 화살표 모두
            image(leftArrow, x + 10, y + 130, 10, 15);
            image(rightArrow, x + 155, y + 130, 10, 15);
        }

        textSize(16);
        fill(255);
        text(contestDate[currentIndex], x + 33, y + 233);

        // 화면 변경 여부 확인 후 Plus 이미지 표시
        if (plusIndex == 1) {
            fill(104,104,104);
            rect(215,558,173,258,20);

            image(plusImage, x + 45, y + 90, 82, 82);
            image(leftArrow, x + 10, y + 130, 10, 15);

            fill(255);
            textSize(18);
            text("Add", x + 70, y + 210);
        }
        
    }

    public void nextScreen(){
        if (currentIndex < contestImg.length - 1) {
            currentIndex += 1;  // 다음 공모전으로
        } else {
            // 마지막 공모전일 경우 Plus 이미지 표시
            plusIndex = 1;
        }
    }

    public void moveLink(){
        link(ContestUrl);
    }

    public void beforeScreen(){
        if (currentIndex > 0) {
            currentIndex -= 1;  // 이전 공모전으로
            plusIndex = 0;
        }
    }

    public boolean isRightArrowClicked(float mouseX, float mouseY, float scrollY){
        float rArrowX = x+160;
        float rArrowY = y+130+scrollY;
        float rArrowWidth = 10;
        float rArrowHeight  = 15;

        if(mouseX > rArrowX && mouseX < rArrowX + rArrowWidth &&
        mouseY > rArrowY && mouseY < rArrowY + rArrowHeight){
            println("오른쪽 화살표 클릭");
            return true;
        }
        return false;
    }

    public boolean isLeftArrowClicked(float mouseX, float mouseY, float scrollY){
        float lArrowX = x+10;
        float lArrowY = y+130+scrollY;
        float lArrowWidth = 10;
        float lArrowHeight  = 15;
       if(mouseX > lArrowX && mouseX < lArrowX + lArrowWidth &&
        mouseY > lArrowY && mouseY < lArrowY + lArrowHeight){
            println("왼쪽 화살표 클릭");
            return true;
        }
        return false;
    }

    public boolean isPluseClicked(float mouseX,float mouseY, float scrollY){
        float plusX = x + 45;
        float plusY = y + 90;
        float plusWidth = 82;
        float plusHeigh = 82;

        if(mouseX > plusX && mouseX < plusX + plusWidth &&
        mouseY > plusY && mouseY < plusY + plusHeigh){
            println("플러스 버튼 클릭");
            return true;
        }
        return false;
    }
}


class GamjaWidget extends Widget{
  PImage gamjaImage; // 감자 이미지를 저장할 변수
  PImage arrawImage;
  PImage gamjaImage2;
  boolean screenChanged = false;  // 화면 전환 여부 확인
  float scrollY; // 스크롤 위치를 저장할 변수

  GamjaWidget(float x, float y, float width, float height
  ,float radius, int bgColor) {
    super(x, y, width, height, radius, bgColor);

    gamjaImage = loadImage("GeGam.png");
    arrawImage = loadImage("rightArrow.png");
    gamjaImage2 = loadImage("GeGamMent.png");
  }

  @Override public 
  void display() {
    fill(249, 242, 232);  // GamjaWidget만의 고유한 색상
    // rect(x, y, width, height, radius);

    image(gamjaImage, x, y,width,height);
    image(arrawImage,x+340, y+100, 22,22);

    if (screenChanged) {
        // 다른 화면을 보여주는 코드 추가
        // 예: 새 화면을 그리거나 화면을 전환하는 로직
      fill(249, 242, 232); 
      rect(x, y, width, height, radius);
      
      image(gamjaImage2,x,y);
    // 예시로 "Next Screen" 표시
      }
    }

  // Arrow 이미지 클릭 여부 확인
  public boolean isArrowClicked(float mouseX, float mouseY, float scrollY) {
    println("클릭하였습니다.");
    println("mouseX : " + mouseX + ", x : "+x);
    println("mouseY : " + mouseY + " , y:"+y);
    float gamjaX = x;  // 감자 이미지의 x 좌표
    float gamjaY = y + scrollY;  // 감자 이미지의 y 좌표
    float gamjaWidth = width;  // 감자 이미지의 너비
    float gamjaHeight = height;  // 감자 이미지의 높이
    if (mouseX > gamjaX && mouseX < gamjaX + gamjaWidth &&
        mouseY > gamjaY && mouseY < gamjaY + gamjaHeight) {
      println("True");
      return true;
    }
    println("False");
    return false;
  }

  // 화면 전환 로직
  public void nextScreen() {
    screenChanged = true;  // 화면을 변경했음을 표시
  }


}




class MusicWidget extends Widget{

  PImage MusicImage; // 노래 이미지를 저장할 변수

  MusicWidget(float x, float y, float width, float height, float radius,int bgColor) {
    super(x, y, width, height, radius, bgColor);
    MusicImage = loadImage("widget_music.png");
  }
  

  @Override public 
  void display() {
    fill(255, 204, 0);  // MusicWidget만의 고유한 색상
    rect(x, y, width, height,radius);
    fill(0);

    image(MusicImage, x, y, width - 10, height - 10);
  }

  
}
class NoteWidget extends Widget {
  PImage noteImage; 
  NoteWidget(float x, float y, float width, float height, float radius, int bgColor) {
    super(x, y, width, height, radius, bgColor);

    noteImage = loadImage("note.png");
  }

  @Override public 
  void display() {
    fill(0xFFFFFFFF);  
    rect(x, y, width, height);
    noStroke(); 
    image(noteImage, x, y, width, height);
  }
}
class StatusWidget extends Widget {
  PImage statusImage; 
  
  StatusWidget(float x, float y, float width, float height, float radius, int bgColor) {
    super(x, y, width, height, radius, bgColor);
    
    statusImage = loadImage("statusbar.png");
  }
  
  @Override public 
  void display() {
    fill(249,242,232);
    rect(x, y, width, height);
    noStroke();
    image(statusImage, x, y, width, height);
  }
  
}
class WeatherWidget extends Widget {
  PImage weatherImage; // 감자 이미지를 저장할 변수

  WeatherWidget(float x, float y, float width, float height, float radius, int bgColor) {
    super(x, y, width, height, radius, bgColor);

    weatherImage = loadImage("weather.png");
  }

   @Override public 
  void display() {
    fill(249,242,232);  // GamjaWidget만의 고유한 색상
    rect(x, y, width, height);
    noStroke(); 
    image(weatherImage, x, y, width, height);
    
  }
} 
class Widget {
  float x, y, width, height,radius;
  int bgColor;


  Widget(float x, float y, float width, float height,float radius, int bgColor) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.bgColor = bgColor; 
    this.radius = radius;
  }


  public void display() {
    fill(bgColor);
    rect(x, y, width, height,radius);
    fill(0);
  }
}


  public void settings() { size(412, 888); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "mainWidget" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
